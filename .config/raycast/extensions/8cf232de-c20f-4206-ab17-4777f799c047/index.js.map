{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/storage.tsx"],
  "sourcesContent": ["import { ActionPanel, Action, Color, Grid, environment, getPreferenceValues, Icon } from \"@raycast/api\";\nimport React, { useState, useEffect } from \"react\";\nimport { SaveActions, getPinnedSymbols, getRecentSymbols, addRecentSymbol } from \"./storage\";\nimport { readFileSync } from \"node:fs\";\n\nexport interface Preferences {\n  version: \"beta\" | \"stable\";\n  primaryAction: \"copySymbol\" | \"pasteSymbol\" | \"copyName\" | \"pasteName\";\n  gridItemSize: Grid.ItemSize;\n  showName: boolean;\n}\n\nexport type sfsymbol = {\n  name: string;\n  symbol: string;\n  categories: string[];\n  searchTerms: string[];\n};\n\nexport type category = {\n  name: string;\n  title: string;\n  symbol: string;\n};\n\nexport interface SymbolProps {\n  symbol: sfsymbol;\n  refresh: () => void;\n  pinned?: boolean;\n  recent?: boolean;\n}\n\nconst { version, primaryAction, gridItemSize, showName }: Preferences = getPreferenceValues();\n\nfunction getDataPath() {\n  return `${environment.assetsPath}/symbols/data${version === \"beta\" ? \"_beta\" : \"\"}.json`;\n}\n\nfunction getImageURL(name: string) {\n  return `https://raw.githubusercontent.com/yugtesh/sf-symbols/main/images/${name}.png`;\n}\n\nexport default function Command() {\n  const data: {\n    symbols: sfsymbol[];\n    categories: category[];\n  } = JSON.parse(readFileSync(getDataPath(), { encoding: \"utf8\" }));\n\n  const [pinned, setPinned] = useState(getPinnedSymbols());\n  const [recent, setRecent] = useState(getRecentSymbols());\n\n  const [category, setCategory] = useState<string | undefined>();\n\n  const [refreshState, setRefreshState] = useState(false);\n  const refresh = () => setRefreshState(!refreshState);\n\n  useEffect(() => {\n    setPinned(getPinnedSymbols());\n    setRecent(getRecentSymbols());\n  }, [refreshState]);\n\n  return (\n    <Grid\n      isLoading={category === undefined}\n      searchBarPlaceholder=\"Search SF Symbols...\"\n      inset={Grid.Inset.Large}\n      itemSize={gridItemSize}\n      searchBarAccessory={\n        <Grid.Dropdown\n          tooltip=\"Select SF sfsymbol category\"\n          storeValue={true}\n          onChange={(newValue) => setCategory(newValue)}\n        >\n          <Grid.Dropdown.Item\n            value={data.categories[0].name}\n            title=\"All Categories\"\n            icon={{\n              source: getImageURL(data.categories[0].symbol),\n              fallback: Icon.Warning,\n              tintColor: Color.PrimaryText,\n            }}\n          />\n          <Grid.Dropdown.Section>\n            {data.categories.slice(1).map((category, index) => (\n              <Grid.Dropdown.Item\n                key={index}\n                value={category.name}\n                title={category.title}\n                icon={{\n                  source: getImageURL(category.symbol),\n                  tintColor: Color.PrimaryText,\n                }}\n              />\n            ))}\n          </Grid.Dropdown.Section>\n        </Grid.Dropdown>\n      }\n    >\n      {category && (\n        <React.Fragment>\n          <Grid.Section title=\"Pinned Symbols\">\n            {pinned\n              .filter((s) => category === \"all\" || s.categories.includes(category))\n              .map((symbol: sfsymbol, index: number) => (\n                <SFSymbol key={index} symbol={symbol} refresh={refresh} pinned />\n              ))}\n          </Grid.Section>\n          <Grid.Section title=\"Recent Symbols\">\n            {recent\n              .filter((s) => category === \"all\" || s.categories.includes(category))\n              .map((symbol: sfsymbol, index: number) => (\n                <SFSymbol key={index} symbol={symbol} refresh={refresh} recent />\n              ))}\n          </Grid.Section>\n          <Grid.Section title={recent.length + pinned.length > 0 ? \"All Symbols\" : undefined}>\n            {data.symbols\n              .filter((s) => category === \"all\" || s.categories.includes(category))\n              .map((symbol: sfsymbol, index: number) => (\n                <SFSymbol key={index} symbol={symbol} refresh={refresh} />\n              ))}\n          </Grid.Section>\n        </React.Fragment>\n      )}\n    </Grid>\n  );\n}\n\nconst SFSymbol = (props: SymbolProps) => {\n  const { symbol } = props;\n  return (\n    <Grid.Item\n      title={showName ? symbol.name : undefined}\n      content={{\n        source: getImageURL(symbol.name),\n        fallback: Icon.Warning,\n        tintColor: Color.PrimaryText,\n      }}\n      keywords={symbol.searchTerms.concat([symbol.name])}\n      actions={<SymbolActions {...props} />}\n    />\n  );\n};\n\nconst SymbolActions = (props: SymbolProps): JSX.Element => {\n  const { name, symbol } = props.symbol;\n\n  const actions: { [key: string]: JSX.Element } = {\n    paste: (\n      <Action.Paste\n        key=\"paste\"\n        title=\"Paste sfsymbol\"\n        content={symbol}\n        shortcut={{ modifiers: [\"shift\", \"opt\"], key: \"v\" }}\n        onPaste={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    copy: (\n      <Action.CopyToClipboard\n        key=\"copy\"\n        title=\"Copy sfsymbol\"\n        content={symbol}\n        shortcut={{ modifiers: [\"shift\", \"opt\"], key: \"c\" }}\n        onCopy={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    pasteName: (\n      <Action.Paste\n        key=\"pasteName\"\n        title=\"Paste Name\"\n        content={name}\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"v\" }}\n        onPaste={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    copyName: (\n      <Action.CopyToClipboard\n        key=\"copyName\"\n        title=\"Copy Name\"\n        content={name}\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"c\" }}\n        onCopy={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n  };\n\n  let order: JSX.Element[] = [];\n\n  if (primaryAction == \"pasteSymbol\") {\n    order = [actions[\"paste\"], actions[\"copy\"], actions[\"copyName\"], actions[\"pasteName\"]];\n  } else if (primaryAction == \"copySymbol\") {\n    order = [actions[\"copy\"], actions[\"paste\"], actions[\"copyName\"], actions[\"pasteName\"]];\n  } else if (primaryAction == \"pasteName\") {\n    order = [actions[\"pasteName\"], actions[\"copyName\"], actions[\"paste\"], actions[\"copy\"]];\n  } else if (primaryAction == \"copyName\") {\n    order = [actions[\"copyName\"], actions[\"pasteName\"], actions[\"copy\"], actions[\"paste\"]];\n  }\n\n  return (\n    <ActionPanel title={name}>\n      {...order}\n      <SaveActions {...props} />\n    </ActionPanel>\n  );\n};\n", "import { Action, ActionPanel, Cache, Icon, Color, showToast, Toast } from \"@raycast/api\";\nimport { sfsymbol, SymbolProps } from \"./index\";\nimport React from \"react\";\n\nconst storage = new Cache();\n\nexport const getPinnedSymbols = (): sfsymbol[] => {\n  const data = storage.get(\"pinned\");\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getRecentSymbols = (): sfsymbol[] => {\n  const data = storage.get(\"recent\");\n  return data ? JSON.parse(data).slice(0, 16) : [];\n};\n\nconst addPinnedSymbol = (symbol: sfsymbol) => {\n  removeRecentSymbol(symbol);\n  const pinnedSymbols = getPinnedSymbols();\n  storage.set(\"pinned\", JSON.stringify([symbol, ...pinnedSymbols.filter((s) => s.name !== symbol.name)]));\n};\n\nexport const addRecentSymbol = (symbol: sfsymbol) => {\n  const pinnedSymbols = getPinnedSymbols();\n  if (!pinnedSymbols.find((s) => s.name === symbol.name)) {\n    const recentSymbols = getRecentSymbols();\n    storage.set(\"recent\", JSON.stringify([symbol, ...recentSymbols.filter((s) => s.name !== symbol.name)]));\n  }\n};\n\nconst removePinnedSymbol = (symbol: sfsymbol) => {\n  const pinnedSymbols = getPinnedSymbols();\n  storage.set(\"pinned\", JSON.stringify(pinnedSymbols.filter((s) => s.name !== symbol.name)));\n};\n\nconst removeRecentSymbol = (symbol: sfsymbol) => {\n  const recentSymbols = getRecentSymbols();\n  storage.set(\"recent\", JSON.stringify(recentSymbols.filter((s) => s.name !== symbol.name)));\n};\n\nconst clearPinnedSymbols = () => {\n  storage.set(\"pinned\", JSON.stringify([]));\n};\n\nconst clearRecentSymbols = () => {\n  storage.set(\"recent\", JSON.stringify([]));\n};\n\nexport const SaveActions = (props: SymbolProps): JSX.Element => {\n  return (\n    <ActionPanel.Section>\n      {props.pinned ? (\n        <React.Fragment>\n          <Action\n            title=\"Remove Pinned sfsymbol\"\n            shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n            icon={Icon.PinDisabled}\n            onAction={async () => {\n              removePinnedSymbol(props.symbol);\n              props.refresh();\n              await showToast(Toast.Style.Success, \"Removed Pinned sfsymbol\");\n            }}\n          />\n          <Action\n            title=\"Clear All Pinned Symbols\"\n            icon={{ source: Icon.XMarkCircleFilled, tintColor: Color.Red }}\n            shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"r\" }}\n            onAction={async () => {\n              clearPinnedSymbols();\n              props.refresh();\n              await showToast(Toast.Style.Success, \"Pinned Symbols Cleared\");\n            }}\n          />\n        </React.Fragment>\n      ) : (\n        <Action\n          title=\"Pin sfsymbol\"\n          icon={Icon.Pin}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"p\" }}\n          onAction={async () => {\n            addPinnedSymbol(props.symbol);\n            props.refresh();\n            await showToast(Toast.Style.Success, \"sfsymbol Pinned\");\n          }}\n        />\n      )}\n      {props.recent && (\n        <React.Fragment>\n          <Action\n            title=\"Remove Recent sfsymbol\"\n            icon={Icon.XMarkCircle}\n            shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n            onAction={async () => {\n              removeRecentSymbol(props.symbol);\n              props.refresh();\n              await showToast(Toast.Style.Success, \"Removed Recent sfsymbol\");\n            }}\n          />\n          <Action\n            title=\"Clear All Recent Symbols\"\n            icon={{ source: Icon.XMarkCircleFilled, tintColor: Color.Red }}\n            shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"r\" }}\n            onAction={async () => {\n              clearRecentSymbols();\n              props.refresh();\n              showToast(Toast.Style.Success, \"Recent Symbols Cleared\");\n            }}\n          />\n        </React.Fragment>\n      )}\n    </ActionPanel.Section>\n  );\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "import_jsx_runtime", "storage", "getPinnedSymbols", "data", "getRecentSymbols", "addPinnedSymbol", "symbol", "removeRecentSymbol", "pinnedSymbols", "s", "addRecentSymbol", "recentSymbols", "removePinnedSymbol", "clearPinnedSymbols", "clearRecentSymbols", "SaveActions", "props", "React", "import_node_fs", "import_jsx_runtime", "version", "primaryAction", "gridItemSize", "showName", "getDataPath", "getImageURL", "name", "Command", "data", "pinned", "setPinned", "getPinnedSymbols", "recent", "setRecent", "getRecentSymbols", "category", "setCategory", "refreshState", "setRefreshState", "refresh", "newValue", "index", "React", "s", "symbol", "SFSymbol", "props", "SymbolActions", "actions", "addRecentSymbol", "order", "SaveActions"]
}
